;--- include file created by h2incx v0.99.19 (copyright 2005-2006 japheth)
;--- source file: D:\MICROS~1\Include\imm.h, last modified: 5/23/2001 19:38
;--- cmdline used for creation:  -d3 -i mshtml.h

ifndef _IMM_
_IMM_	EQU	<>
ifdef __cplusplus
;extern "C"
;{
endif 
ifndef _IMM_SDK_DEFINED_
_IMM_SDK_DEFINED_	EQU	<>
if (WINVER ge 040Ah)
DECLARE_HANDLE( HIMC)
DECLARE_HANDLE( HIMCC)
else 
HIMC typedef DWORD
HIMCC typedef DWORD
endif 
LPHKL typedef ptr HKL
LPUINT typedef ptr DWORD
COMPOSITIONFORM	struct 
dwStyle	DWORD	?
ptCurrentPos	POINT	<>
rcArea	RECT	<>
COMPOSITIONFORM	ends

PCOMPOSITIONFORM typedef ptr COMPOSITIONFORM
NPCOMPOSITIONFORM typedef ptr COMPOSITIONFORM
LPCOMPOSITIONFORM typedef ptr COMPOSITIONFORM

CANDIDATEFORM	struct 
dwIndex	DWORD	?
dwStyle	DWORD	?
ptCurrentPos	POINT	<>
rcArea	RECT	<>
CANDIDATEFORM	ends

PCANDIDATEFORM typedef ptr CANDIDATEFORM
NPCANDIDATEFORM typedef ptr CANDIDATEFORM
LPCANDIDATEFORM typedef ptr CANDIDATEFORM

CANDIDATELIST	struct 
dwSize	DWORD	?
dwStyle	DWORD	?
dwCount	DWORD	?
dwSelection	DWORD	?
dwPageStart	DWORD	?
dwPageSize	DWORD	?
dwOffset	DWORD 1 dup (?)
CANDIDATELIST	ends

PCANDIDATELIST typedef ptr CANDIDATELIST
NPCANDIDATELIST typedef ptr CANDIDATELIST
LPCANDIDATELIST typedef ptr CANDIDATELIST

REGISTERWORDA	struct 
lpReading	LPSTR	?
lpWord	LPSTR	?
REGISTERWORDA	ends

PREGISTERWORDA typedef ptr REGISTERWORDA
NPREGISTERWORDA typedef ptr REGISTERWORDA
LPREGISTERWORDA typedef ptr REGISTERWORDA

REGISTERWORDW	struct 
lpReading	LPWSTR	?
lpWord	LPWSTR	?
REGISTERWORDW	ends

PREGISTERWORDW typedef ptr REGISTERWORDW
NPREGISTERWORDW typedef ptr REGISTERWORDW
LPREGISTERWORDW typedef ptr REGISTERWORDW

ifdef UNICODE
REGISTERWORD typedef REGISTERWORDW
PREGISTERWORD typedef PREGISTERWORDW
NPREGISTERWORD typedef NPREGISTERWORDW
LPREGISTERWORD typedef LPREGISTERWORDW
else 
REGISTERWORD typedef REGISTERWORDA
PREGISTERWORD typedef PREGISTERWORDA
NPREGISTERWORD typedef NPREGISTERWORDA
LPREGISTERWORD typedef LPREGISTERWORDA
endif 
if (WINVER ge 040Ah)
RECONVERTSTRING	struct 
dwSize	DWORD	?
dwVersion	DWORD	?
dwStrLen	DWORD	?
dwStrOffset	DWORD	?
dwCompStrLen	DWORD	?
dwCompStrOffset	DWORD	?
dwTargetStrLen	DWORD	?
dwTargetStrOffset	DWORD	?
RECONVERTSTRING	ends

PRECONVERTSTRING typedef ptr RECONVERTSTRING
NPRECONVERTSTRING typedef ptr RECONVERTSTRING
LPRECONVERTSTRING typedef ptr RECONVERTSTRING

endif 
STYLE_DESCRIPTION_SIZE	EQU	32
STYLEBUFA	struct 
dwStyle	DWORD	?
szDescription	CHAR STYLE_DESCRIPTION_SIZE dup (?)
STYLEBUFA	ends

PSTYLEBUFA typedef ptr STYLEBUFA
NPSTYLEBUFA typedef ptr STYLEBUFA
LPSTYLEBUFA typedef ptr STYLEBUFA

STYLEBUFW	struct 
dwStyle	DWORD	?
szDescription	WCHAR STYLE_DESCRIPTION_SIZE dup (?)
STYLEBUFW	ends

PSTYLEBUFW typedef ptr STYLEBUFW
NPSTYLEBUFW typedef ptr STYLEBUFW
LPSTYLEBUFW typedef ptr STYLEBUFW

ifdef UNICODE
STYLEBUF typedef STYLEBUFW
PSTYLEBUF typedef PSTYLEBUFW
NPSTYLEBUF typedef NPSTYLEBUFW
LPSTYLEBUF typedef LPSTYLEBUFW
else 
STYLEBUF typedef STYLEBUFA
PSTYLEBUF typedef PSTYLEBUFA
NPSTYLEBUF typedef NPSTYLEBUFA
LPSTYLEBUF typedef LPSTYLEBUFA
endif 
if (WINVER ge 040Ah)
IMEMENUITEM_STRING_SIZE	EQU	80
IMEMENUITEMINFOA	struct 
cbSize	DWORD	?
fType	DWORD	?
fState	DWORD	?
wID	DWORD	?
hbmpChecked	HBITMAP	?
hbmpUnchecked	HBITMAP	?
dwItemData	DWORD	?
szString	CHAR IMEMENUITEM_STRING_SIZE dup (?)
hbmpItem	HBITMAP	?
IMEMENUITEMINFOA	ends

PIMEMENUITEMINFOA typedef ptr IMEMENUITEMINFOA
NPIMEMENUITEMINFOA typedef ptr IMEMENUITEMINFOA
LPIMEMENUITEMINFOA typedef ptr IMEMENUITEMINFOA

IMEMENUITEMINFOW	struct 
cbSize	DWORD	?
fType	DWORD	?
fState	DWORD	?
wID	DWORD	?
hbmpChecked	HBITMAP	?
hbmpUnchecked	HBITMAP	?
dwItemData	DWORD	?
szString	WCHAR IMEMENUITEM_STRING_SIZE dup (?)
hbmpItem	HBITMAP	?
IMEMENUITEMINFOW	ends

PIMEMENUITEMINFOW typedef ptr IMEMENUITEMINFOW
NPIMEMENUITEMINFOW typedef ptr IMEMENUITEMINFOW
LPIMEMENUITEMINFOW typedef ptr IMEMENUITEMINFOW

ifdef UNICODE
IMEMENUITEMINFO typedef IMEMENUITEMINFOW
PIMEMENUITEMINFO typedef PIMEMENUITEMINFOW
NPIMEMENUITEMINFO typedef NPIMEMENUITEMINFOW
LPIMEMENUITEMINFO typedef LPIMEMENUITEMINFOW
else 
IMEMENUITEMINFO typedef IMEMENUITEMINFOA
PIMEMENUITEMINFO typedef PIMEMENUITEMINFOA
NPIMEMENUITEMINFO typedef NPIMEMENUITEMINFOA
LPIMEMENUITEMINFO typedef LPIMEMENUITEMINFOA
endif 
IMECHARPOSITION	struct 
dwSize	DWORD	?
dwCharPos	DWORD	?
pt	POINT	<>
cLineHeight	DWORD	?
rcDocument	RECT	<>
IMECHARPOSITION	ends

PIMECHARPOSITION typedef ptr IMECHARPOSITION
NPIMECHARPOSITION typedef ptr IMECHARPOSITION
LPIMECHARPOSITION typedef ptr IMECHARPOSITION

proto_IMCENUMPROC typedef proto WINSTDCALLCONV :HIMC,:LPARAM
IMCENUMPROC typedef ptr proto_IMCENUMPROC
endif 
@DefProto DECLSPEC_IMPORT, ImmInstallIMEA, stdcall, ,<:LPSTR, :LPSTR>,8
@DefProto DECLSPEC_IMPORT, ImmInstallIMEW, stdcall, ,<:LPWSTR, :LPWSTR>,8
ifdef UNICODE
ImmInstallIME	EQU	<ImmInstallIMEW>
else 
ImmInstallIME	EQU	<ImmInstallIMEA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetDefaultIMEWnd, stdcall, ,<:HWND>,4
@DefProto DECLSPEC_IMPORT, ImmGetDescriptionA, stdcall, ,<:HKL, :LPSTR, :DWORD>,12
@DefProto DECLSPEC_IMPORT, ImmGetDescriptionW, stdcall, ,<:HKL, :LPWSTR, :DWORD>,12
ifdef UNICODE
ImmGetDescription	EQU	<ImmGetDescriptionW>
else 
ImmGetDescription	EQU	<ImmGetDescriptionA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetIMEFileNameA, stdcall, ,< :HKL, :LPSTR, :DWORD>,12
@DefProto DECLSPEC_IMPORT, ImmGetIMEFileNameW, stdcall, ,< :HKL, :LPWSTR, :DWORD>,12
ifdef UNICODE
ImmGetIMEFileName	EQU	<ImmGetIMEFileNameW>
else 
ImmGetIMEFileName	EQU	<ImmGetIMEFileNameA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetProperty, stdcall, , <:HKL, :DWORD>,8
@DefProto DECLSPEC_IMPORT, ImmIsIME, stdcall, , <:HKL>,4
@DefProto DECLSPEC_IMPORT, ImmSimulateHotKey, stdcall, , <:HWND, :DWORD>,8
@DefProto DECLSPEC_IMPORT, ImmCreateContext, stdcall,,<>,0
@DefProto DECLSPEC_IMPORT, ImmDestroyContext, stdcall, ,<:HIMC>,4
@DefProto DECLSPEC_IMPORT, ImmGetContext, stdcall, ,<:HWND>,4
@DefProto DECLSPEC_IMPORT, ImmReleaseContext, stdcall, ,<:HWND, :HIMC>,8
@DefProto DECLSPEC_IMPORT, ImmAssociateContext, stdcall, ,<:HWND, :HIMC>,8
if (WINVER ge 040Ah)
@DefProto DECLSPEC_IMPORT, ImmAssociateContextEx, stdcall, ,<:HWND, :HIMC, :DWORD>,12
endif 
@DefProto DECLSPEC_IMPORT, ImmGetCompositionStringA, stdcall, ,<:HIMC, :DWORD, :LPVOID, :DWORD>,16
@DefProto DECLSPEC_IMPORT, ImmGetCompositionStringW, stdcall, ,<:HIMC, :DWORD, :LPVOID, :DWORD>,16
ifdef UNICODE
ImmGetCompositionString	EQU	<ImmGetCompositionStringW>
else 
ImmGetCompositionString	EQU	<ImmGetCompositionStringA>
endif 
@DefProto DECLSPEC_IMPORT, ImmSetCompositionStringA, stdcall, ,<:HIMC, :DWORD, :LPVOID, :DWORD, :LPVOID, :DWORD>,24
@DefProto DECLSPEC_IMPORT, ImmSetCompositionStringW, stdcall, ,<:HIMC, :DWORD, :LPVOID, :DWORD, :LPVOID, :DWORD>,24
ifdef UNICODE
ImmSetCompositionString	EQU	<ImmSetCompositionStringW>
else 
ImmSetCompositionString	EQU	<ImmSetCompositionStringA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetCandidateListCountA, stdcall, ,<:HIMC, :LPDWORD>,8
@DefProto DECLSPEC_IMPORT, ImmGetCandidateListCountW, stdcall, ,<:HIMC, :LPDWORD>,8
ifdef UNICODE
ImmGetCandidateListCount	EQU	<ImmGetCandidateListCountW>
else 
ImmGetCandidateListCount	EQU	<ImmGetCandidateListCountA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetCandidateListA, stdcall, ,<:HIMC, :DWORD, :LPCANDIDATELIST, :DWORD>,16
@DefProto DECLSPEC_IMPORT, ImmGetCandidateListW, stdcall, ,<:HIMC, :DWORD, :LPCANDIDATELIST, :DWORD>,16
ifdef UNICODE
ImmGetCandidateList	EQU	<ImmGetCandidateListW>
else 
ImmGetCandidateList	EQU	<ImmGetCandidateListA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetGuideLineA, stdcall, ,<:HIMC, :DWORD, :LPSTR, :DWORD>,16
@DefProto DECLSPEC_IMPORT, ImmGetGuideLineW, stdcall, ,<:HIMC, :DWORD, :LPWSTR, :DWORD>,16
ifdef UNICODE
ImmGetGuideLine	EQU	<ImmGetGuideLineW>
else 
ImmGetGuideLine	EQU	<ImmGetGuideLineA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetConversionStatus, stdcall, ,<:HIMC, :LPDWORD, :LPDWORD>,12
@DefProto DECLSPEC_IMPORT, ImmSetConversionStatus, stdcall, ,<:HIMC, :DWORD, :DWORD>,12
@DefProto DECLSPEC_IMPORT, ImmGetOpenStatus, stdcall, ,<:HIMC>,4
@DefProto DECLSPEC_IMPORT, ImmSetOpenStatus, stdcall, ,<:HIMC, :BOOL>,8
ifndef defined
defined macro x
ifdef x
  exitm <-1>
else
  exitm <0>
endif
endm
endif
if defined(_WINGDI_) AND  0 eq defined(NOGDI)
@DefProto DECLSPEC_IMPORT, ImmGetCompositionFontA, stdcall, ,<:HIMC, :LPLOGFONTA>,8
@DefProto DECLSPEC_IMPORT, ImmGetCompositionFontW, stdcall, ,<:HIMC, :LPLOGFONTW>,8
ifdef UNICODE
ImmGetCompositionFont	EQU	<ImmGetCompositionFontW>
else 
ImmGetCompositionFont	EQU	<ImmGetCompositionFontA>
endif 
@DefProto DECLSPEC_IMPORT, ImmSetCompositionFontA, stdcall, ,<:HIMC, :LPLOGFONTA>,8
@DefProto DECLSPEC_IMPORT, ImmSetCompositionFontW, stdcall, ,<:HIMC, :LPLOGFONTW>,8
ifdef UNICODE
ImmSetCompositionFont	EQU	<ImmSetCompositionFontW>
else 
ImmSetCompositionFont	EQU	<ImmSetCompositionFontA>
endif 
endif 
@DefProto DECLSPEC_IMPORT, ImmConfigureIMEA, stdcall, ,<:HKL, :HWND, :DWORD, :LPVOID>,16
@DefProto DECLSPEC_IMPORT, ImmConfigureIMEW, stdcall, ,<:HKL, :HWND, :DWORD, :LPVOID>,16
ifdef UNICODE
ImmConfigureIME	EQU	<ImmConfigureIMEW>
else 
ImmConfigureIME	EQU	<ImmConfigureIMEA>
endif 
@DefProto DECLSPEC_IMPORT, ImmEscapeA, stdcall, ,<:HKL, :HIMC, :DWORD, :LPVOID>,16
@DefProto DECLSPEC_IMPORT, ImmEscapeW, stdcall, ,<:HKL, :HIMC, :DWORD, :LPVOID>,16
ifdef UNICODE
ImmEscape	EQU	<ImmEscapeW>
else 
ImmEscape	EQU	<ImmEscapeA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetConversionListA, stdcall, ,<:HKL, :HIMC, :LPSTR, :LPCANDIDATELIST, :DWORD, :DWORD>,24
@DefProto DECLSPEC_IMPORT, ImmGetConversionListW, stdcall, ,<:HKL, :HIMC, :LPWSTR, :LPCANDIDATELIST, :DWORD, :DWORD>,24
ifdef UNICODE
ImmGetConversionList	EQU	<ImmGetConversionListW>
else 
ImmGetConversionList	EQU	<ImmGetConversionListA>
endif 
@DefProto DECLSPEC_IMPORT, ImmNotifyIME, stdcall, ,<:HIMC, :DWORD, :DWORD, :DWORD>,16
@DefProto DECLSPEC_IMPORT, ImmGetStatusWindowPos, stdcall, ,<:HIMC, :LPPOINT>,8
@DefProto DECLSPEC_IMPORT, ImmSetStatusWindowPos, stdcall, ,<:HIMC, :LPPOINT>,8
@DefProto DECLSPEC_IMPORT, ImmGetCompositionWindow, stdcall, ,<:HIMC, :LPCOMPOSITIONFORM>,8
@DefProto DECLSPEC_IMPORT, ImmSetCompositionWindow, stdcall, ,<:HIMC, :LPCOMPOSITIONFORM>,8
@DefProto DECLSPEC_IMPORT, ImmGetCandidateWindow, stdcall, ,<:HIMC, :DWORD, :LPCANDIDATEFORM>,12
@DefProto DECLSPEC_IMPORT, ImmSetCandidateWindow, stdcall, ,<:HIMC, :LPCANDIDATEFORM>,8
@DefProto DECLSPEC_IMPORT, ImmIsUIMessageA, stdcall, ,<:HWND, :DWORD, :WPARAM, :LPARAM>,16
@DefProto DECLSPEC_IMPORT, ImmIsUIMessageW, stdcall, ,<:HWND, :DWORD, :WPARAM, :LPARAM>,16
ifdef UNICODE
ImmIsUIMessage	EQU	<ImmIsUIMessageW>
else 
ImmIsUIMessage	EQU	<ImmIsUIMessageA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetVirtualKey, WINSTDCALLCONV, , <:HWND>, 4
proto_REGISTERWORDENUMPROCA typedef proto WINSTDCALLCONV :LPSTR,:DWORD,:LPSTR,:LPVOID
REGISTERWORDENUMPROCA typedef ptr proto_REGISTERWORDENUMPROCA
proto_REGISTERWORDENUMPROCW typedef proto WINSTDCALLCONV :LPWSTR,:DWORD,:LPWSTR,:LPVOID
REGISTERWORDENUMPROCW typedef ptr proto_REGISTERWORDENUMPROCW
ifdef UNICODE
REGISTERWORDENUMPROC	EQU	<REGISTERWORDENUMPROCW>
else 
REGISTERWORDENUMPROC	EQU	<REGISTERWORDENUMPROCA>
endif 
@DefProto DECLSPEC_IMPORT, ImmRegisterWordA, stdcall, ,<:HKL, :LPSTR, :DWORD, :LPSTR>,16
@DefProto DECLSPEC_IMPORT, ImmRegisterWordW, stdcall, ,<:HKL, :LPWSTR, :DWORD, :LPWSTR>,16
ifdef UNICODE
ImmRegisterWord	EQU	<ImmRegisterWordW>
else 
ImmRegisterWord	EQU	<ImmRegisterWordA>
endif 
@DefProto DECLSPEC_IMPORT, ImmUnregisterWordA, stdcall, ,<:HKL, :LPSTR, :DWORD, :LPSTR>,16
@DefProto DECLSPEC_IMPORT, ImmUnregisterWordW, stdcall, ,<:HKL, :LPWSTR, :DWORD, :LPWSTR>,16
ifdef UNICODE
ImmUnregisterWord	EQU	<ImmUnregisterWordW>
else 
ImmUnregisterWord	EQU	<ImmUnregisterWordA>
endif 
@DefProto DECLSPEC_IMPORT, ImmGetRegisterWordStyleA, stdcall, ,<:HKL, :DWORD, :LPSTYLEBUFA>,12
@DefProto DECLSPEC_IMPORT, ImmGetRegisterWordStyleW, stdcall, ,<:HKL, :DWORD, :LPSTYLEBUFW>,12
ifdef UNICODE
ImmGetRegisterWordStyle	EQU	<ImmGetRegisterWordStyleW>
else 
ImmGetRegisterWordStyle	EQU	<ImmGetRegisterWordStyleA>
endif 
@DefProto DECLSPEC_IMPORT, ImmEnumRegisterWordA, stdcall, ,<:HKL, :REGISTERWORDENUMPROCA, :LPSTR, :DWORD, :LPSTR, :LPVOID>,24
@DefProto DECLSPEC_IMPORT, ImmEnumRegisterWordW, stdcall, ,<:HKL, :REGISTERWORDENUMPROCW, :LPWSTR, :DWORD, :LPWSTR, :LPVOID>,24
ifdef UNICODE
ImmEnumRegisterWord	EQU	<ImmEnumRegisterWordW>
else 
ImmEnumRegisterWord	EQU	<ImmEnumRegisterWordA>
endif 
if (WINVER ge 040Ah)
@DefProto DECLSPEC_IMPORT, ImmDisableIME, stdcall, ,<:DWORD>,4
@DefProto DECLSPEC_IMPORT, ImmEnumInputContext, stdcall, ,<:DWORD, :IMCENUMPROC, :LPARAM>,12
@DefProto DECLSPEC_IMPORT, ImmGetImeMenuItemsA, stdcall, ,<:HIMC, :DWORD, :DWORD, :LPIMEMENUITEMINFOA, :LPIMEMENUITEMINFOA, :DWORD>,24
@DefProto DECLSPEC_IMPORT, ImmGetImeMenuItemsW, stdcall, ,<:HIMC, :DWORD, :DWORD, :LPIMEMENUITEMINFOW, :LPIMEMENUITEMINFOW, :DWORD>,24
ifdef UNICODE
ImmGetImeMenuItems	EQU	<ImmGetImeMenuItemsW>
else 
ImmGetImeMenuItems	EQU	<ImmGetImeMenuItemsA>
endif 
endif 
IMC_GETCANDIDATEPOS	EQU	0007h
IMC_SETCANDIDATEPOS	EQU	0008h
IMC_GETCOMPOSITIONFONT	EQU	0009h
IMC_SETCOMPOSITIONFONT	EQU	000Ah
IMC_GETCOMPOSITIONWINDOW	EQU	000Bh
IMC_SETCOMPOSITIONWINDOW	EQU	000Ch
IMC_GETSTATUSWINDOWPOS	EQU	000Fh
IMC_SETSTATUSWINDOWPOS	EQU	0010h
IMC_CLOSESTATUSWINDOW	EQU	0021h
IMC_OPENSTATUSWINDOW	EQU	0022h
NI_OPENCANDIDATE	EQU	0010h
NI_CLOSECANDIDATE	EQU	0011h
NI_SELECTCANDIDATESTR	EQU	0012h
NI_CHANGECANDIDATELIST	EQU	0013h
NI_FINALIZECONVERSIONRESULT	EQU	0014h
NI_COMPOSITIONSTR	EQU	0015h
NI_SETCANDIDATE_PAGESTART	EQU	0016h
NI_SETCANDIDATE_PAGESIZE	EQU	0017h
NI_IMEMENUSELECTED	EQU	0018h
ISC_SHOWUICANDIDATEWINDOW	EQU	00000001h
ISC_SHOWUICOMPOSITIONWINDOW	EQU	80000000h
ISC_SHOWUIGUIDELINE	EQU	40000000h
ISC_SHOWUIALLCANDIDATEWINDOW	EQU	0000000Fh
ISC_SHOWUIALL	EQU	0C000000Fh
CPS_COMPLETE	EQU	0001h
CPS_CONVERT	EQU	0002h
CPS_REVERT	EQU	0003h
CPS_CANCEL	EQU	0004h
MOD_ALT	EQU	0001h
MOD_CONTROL	EQU	0002h
MOD_SHIFT	EQU	0004h
MOD_LEFT	EQU	8000h
MOD_RIGHT	EQU	4000h
MOD_ON_KEYUP	EQU	0800h
MOD_IGNORE_ALL_MODIFIER	EQU	0400h
IME_CHOTKEY_IME_NONIME_TOGGLE	EQU	10h
IME_CHOTKEY_SHAPE_TOGGLE	EQU	11h
IME_CHOTKEY_SYMBOL_TOGGLE	EQU	12h
IME_JHOTKEY_CLOSE_OPEN	EQU	30h
IME_KHOTKEY_SHAPE_TOGGLE	EQU	50h
IME_KHOTKEY_HANJACONVERT	EQU	51h
IME_KHOTKEY_ENGLISH	EQU	52h
IME_THOTKEY_IME_NONIME_TOGGLE	EQU	70h
IME_THOTKEY_SHAPE_TOGGLE	EQU	71h
IME_THOTKEY_SYMBOL_TOGGLE	EQU	72h
IME_HOTKEY_DSWITCH_FIRST	EQU	100h
IME_HOTKEY_DSWITCH_LAST	EQU	11Fh
IME_HOTKEY_PRIVATE_FIRST	EQU	200h
IME_ITHOTKEY_RESEND_RESULTSTR	EQU	200h
IME_ITHOTKEY_PREVIOUS_COMPOSITION	EQU	201h
IME_ITHOTKEY_UISTYLE_TOGGLE	EQU	202h
IME_ITHOTKEY_RECONVERTSTRING	EQU	203h
IME_HOTKEY_PRIVATE_LAST	EQU	21Fh
GCS_COMPREADSTR	EQU	0001h
GCS_COMPREADATTR	EQU	0002h
GCS_COMPREADCLAUSE	EQU	0004h
GCS_COMPSTR	EQU	0008h
GCS_COMPATTR	EQU	0010h
GCS_COMPCLAUSE	EQU	0020h
GCS_CURSORPOS	EQU	0080h
GCS_DELTASTART	EQU	0100h
GCS_RESULTREADSTR	EQU	0200h
GCS_RESULTREADCLAUSE	EQU	0400h
GCS_RESULTSTR	EQU	0800h
GCS_RESULTCLAUSE	EQU	1000h
CS_INSERTCHAR	EQU	2000h
CS_NOMOVECARET	EQU	4000h
IMEVER_0310	EQU	0003000Ah
IMEVER_0400	EQU	00040000h
IME_PROP_AT_CARET	EQU	00010000h
IME_PROP_SPECIAL_UI	EQU	00020000h
IME_PROP_CANDLIST_START_FROM_1	EQU	00040000h
IME_PROP_UNICODE	EQU	00080000h
IME_PROP_COMPLETE_ON_UNSELECT	EQU	00100000h
UI_CAP_2700	EQU	00000001h
UI_CAP_ROT90	EQU	00000002h
UI_CAP_ROTANY	EQU	00000004h
SCS_CAP_COMPSTR	EQU	00000001h
SCS_CAP_MAKEREAD	EQU	00000002h
SCS_CAP_SETRECONVERTSTRING	EQU	00000004h
SELECT_CAP_CONVERSION	EQU	00000001h
SELECT_CAP_SENTENCE	EQU	00000002h
GGL_LEVEL	EQU	00000001h
GGL_INDEX	EQU	00000002h
GGL_STRING	EQU	00000003h
GGL_PRIVATE	EQU	00000004h
GL_LEVEL_NOGUIDELINE	EQU	00000000h
GL_LEVEL_FATAL	EQU	00000001h
GL_LEVEL_ERROR	EQU	00000002h
GL_LEVEL_WARNING	EQU	00000003h
GL_LEVEL_INFORMATION	EQU	00000004h
GL_ID_UNKNOWN	EQU	00000000h
GL_ID_NOMODULE	EQU	00000001h
GL_ID_NODICTIONARY	EQU	00000010h
GL_ID_CANNOTSAVE	EQU	00000011h
GL_ID_NOCONVERT	EQU	00000020h
GL_ID_TYPINGERROR	EQU	00000021h
GL_ID_TOOMANYSTROKE	EQU	00000022h
GL_ID_READINGCONFLICT	EQU	00000023h
GL_ID_INPUTREADING	EQU	00000024h
GL_ID_INPUTRADICAL	EQU	00000025h
GL_ID_INPUTCODE	EQU	00000026h
GL_ID_INPUTSYMBOL	EQU	00000027h
GL_ID_CHOOSECANDIDATE	EQU	00000028h
GL_ID_REVERSECONVERSION	EQU	00000029h
GL_ID_PRIVATE_FIRST	EQU	00008000h
GL_ID_PRIVATE_LAST	EQU	0000FFFFh
IGP_GETIMEVERSION	EQU	- 4
IGP_PROPERTY	EQU	00000004h
IGP_CONVERSION	EQU	00000008h
IGP_SENTENCE	EQU	0000000ch
IGP_UI	EQU	00000010h
IGP_SETCOMPSTR	EQU	00000014h
IGP_SELECT	EQU	00000018h
SCS_SETSTR	EQU	( GCS_COMPREADSTR  or  GCS_COMPSTR )
SCS_CHANGEATTR	EQU	( GCS_COMPREADATTR  or  GCS_COMPATTR )
SCS_CHANGECLAUSE	EQU	( GCS_COMPREADCLAUSE  or  GCS_COMPCLAUSE )
SCS_SETRECONVERTSTRING	EQU	00010000h
SCS_QUERYRECONVERTSTRING	EQU	00020000h
ATTR_INPUT	EQU	00h
ATTR_TARGET_CONVERTED	EQU	01h
ATTR_CONVERTED	EQU	02h
ATTR_TARGET_NOTCONVERTED	EQU	03h
ATTR_INPUT_ERROR	EQU	04h
ATTR_FIXEDCONVERTED	EQU	05h
CFS_DEFAULT	EQU	0000h
CFS_RECT	EQU	0001h
CFS_POINT	EQU	0002h
CFS_FORCE_POSITION	EQU	0020h
CFS_CANDIDATEPOS	EQU	0040h
CFS_EXCLUDE	EQU	0080h
GCL_CONVERSION	EQU	0001h
GCL_REVERSECONVERSION	EQU	0002h
GCL_REVERSE_LENGTH	EQU	0003h
IME_CMODE_ALPHANUMERIC	EQU	0000h
IME_CMODE_NATIVE	EQU	0001h
IME_CMODE_CHINESE	EQU	<IME_CMODE_NATIVE>
IME_CMODE_HANGEUL	EQU	<IME_CMODE_NATIVE>
IME_CMODE_HANGUL	EQU	<IME_CMODE_NATIVE>
IME_CMODE_JAPANESE	EQU	<IME_CMODE_NATIVE>
IME_CMODE_KATAKANA	EQU	0002h
IME_CMODE_LANGUAGE	EQU	0003h
IME_CMODE_FULLSHAPE	EQU	0008h
IME_CMODE_ROMAN	EQU	0010h
IME_CMODE_CHARCODE	EQU	0020h
IME_CMODE_HANJACONVERT	EQU	0040h
IME_CMODE_SOFTKBD	EQU	0080h
IME_CMODE_NOCONVERSION	EQU	0100h
IME_CMODE_EUDC	EQU	0200h
IME_CMODE_SYMBOL	EQU	0400h
IME_CMODE_FIXED	EQU	0800h
IME_SMODE_NONE	EQU	0000h
IME_SMODE_PLAURALCLAUSE	EQU	0001h
IME_SMODE_SINGLECONVERT	EQU	0002h
IME_SMODE_AUTOMATIC	EQU	0004h
IME_SMODE_PHRASEPREDICT	EQU	0008h
IME_SMODE_CONVERSATION	EQU	0010h
IME_CAND_UNKNOWN	EQU	0000h
IME_CAND_READ	EQU	0001h
IME_CAND_CODE	EQU	0002h
IME_CAND_MEANING	EQU	0003h
IME_CAND_RADICAL	EQU	0004h
IME_CAND_STROKE	EQU	0005h
IMN_CLOSESTATUSWINDOW	EQU	0001h
IMN_OPENSTATUSWINDOW	EQU	0002h
IMN_CHANGECANDIDATE	EQU	0003h
IMN_CLOSECANDIDATE	EQU	0004h
IMN_OPENCANDIDATE	EQU	0005h
IMN_SETCONVERSIONMODE	EQU	0006h
IMN_SETSENTENCEMODE	EQU	0007h
IMN_SETOPENSTATUS	EQU	0008h
IMN_SETCANDIDATEPOS	EQU	0009h
IMN_SETCOMPOSITIONFONT	EQU	000Ah
IMN_SETCOMPOSITIONWINDOW	EQU	000Bh
IMN_SETSTATUSWINDOWPOS	EQU	000Ch
IMN_GUIDELINE	EQU	000Dh
IMN_PRIVATE	EQU	000Eh
if (WINVER ge 040Ah)
IMR_COMPOSITIONWINDOW	EQU	0001h
IMR_CANDIDATEWINDOW	EQU	0002h
IMR_COMPOSITIONFONT	EQU	0003h
IMR_RECONVERTSTRING	EQU	0004h
IMR_CONFIRMRECONVERTSTRING	EQU	0005h
IMR_QUERYCHARPOSITION	EQU	0006h
IMR_DOCUMENTFEED	EQU	0007h
endif 
IMM_ERROR_NODATA	EQU	- 1
IMM_ERROR_GENERAL	EQU	- 2
IME_CONFIG_GENERAL	EQU	1
IME_CONFIG_REGISTERWORD	EQU	2
IME_CONFIG_SELECTDICTIONARY	EQU	3
IME_ESC_QUERY_SUPPORT	EQU	0003h
IME_ESC_RESERVED_FIRST	EQU	0004h
IME_ESC_RESERVED_LAST	EQU	07FFh
IME_ESC_PRIVATE_FIRST	EQU	0800h
IME_ESC_PRIVATE_LAST	EQU	0FFFh
IME_ESC_SEQUENCE_TO_INTERNAL	EQU	1001h
IME_ESC_GET_EUDC_DICTIONARY	EQU	1003h
IME_ESC_SET_EUDC_DICTIONARY	EQU	1004h
IME_ESC_MAX_KEY	EQU	1005h
IME_ESC_IME_NAME	EQU	1006h
IME_ESC_SYNC_HOTKEY	EQU	1007h
IME_ESC_HANJA_MODE	EQU	1008h
IME_ESC_AUTOMATA	EQU	1009h
IME_ESC_PRIVATE_HOTKEY	EQU	100ah
IME_ESC_GETHELPFILENAME	EQU	100bh
IME_REGWORD_STYLE_EUDC	EQU	00000001h
IME_REGWORD_STYLE_USER_FIRST	EQU	80000000h
IME_REGWORD_STYLE_USER_LAST	EQU	0FFFFFFFFh
if (WINVER ge 040Ah)
IACE_CHILDREN	EQU	0001h
IACE_DEFAULT	EQU	0010h
IACE_IGNORENOCONTEXT	EQU	0020h
IGIMIF_RIGHTMENU	EQU	0001h
IGIMII_CMODE	EQU	0001h
IGIMII_SMODE	EQU	0002h
IGIMII_CONFIGURE	EQU	0004h
IGIMII_TOOLS	EQU	0008h
IGIMII_HELP	EQU	0010h
IGIMII_OTHER	EQU	0020h
IGIMII_INPUTTOOLS	EQU	0040h
IMFT_RADIOCHECK	EQU	00001h
IMFT_SEPARATOR	EQU	00002h
IMFT_SUBMENU	EQU	00004h
IMFS_GRAYED	EQU	<MFS_GRAYED>
IMFS_DISABLED	EQU	<MFS_DISABLED>
IMFS_CHECKED	EQU	<MFS_CHECKED>
IMFS_HILITE	EQU	<MFS_HILITE>
IMFS_ENABLED	EQU	<MFS_ENABLED>
IMFS_UNCHECKED	EQU	<MFS_UNCHECKED>
IMFS_UNHILITE	EQU	<MFS_UNHILITE>
IMFS_DEFAULT	EQU	<MFS_DEFAULT>
endif 
SOFTKEYBOARD_TYPE_T1	EQU	0001h
SOFTKEYBOARD_TYPE_C1	EQU	0002h
endif 
ifdef __cplusplus
;}
endif 
endif 

;--- errors: 0
;--- end of file ---
