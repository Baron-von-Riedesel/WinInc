;--- include file created by h2incx v0.99.19 (copyright 2005-2006 japheth)
;--- source file: D:\MICROS~1\Include\winsvc.h, last modified: 4/11/2001 14:40
;--- cmdline used for creation:  -d3 -i mshtml.h

ifndef _WINSVC_
_WINSVC_	EQU	<>
ifndef defined
defined macro x
ifdef x
  exitm <-1>
else
  exitm <0>
endif
endm
endif
if 0 eq defined(WINADVAPI)
if 0 eq defined(_ADVAPI32_)
WINADVAPI	EQU	<DECLSPEC_IMPORT>
else 
WINADVAPI	EQU	<>
endif 
endif 
ifdef __cplusplus
;extern "C"
;{
endif 
SERVICES_ACTIVE_DATABASEW	EQU	<L("ServicesActive")>
SERVICES_FAILED_DATABASEW	EQU	<L("ServicesFailed")>
SERVICES_ACTIVE_DATABASEA	EQU	<"ServicesActive">
SERVICES_FAILED_DATABASEA	EQU	<"ServicesFailed">
SC_GROUP_IDENTIFIERW	EQU	<L' + '>
SC_GROUP_IDENTIFIERA	EQU	<' + '>
ifdef UNICODE
SERVICES_ACTIVE_DATABASE	EQU	<SERVICES_ACTIVE_DATABASEW>
SERVICES_FAILED_DATABASE	EQU	<SERVICES_FAILED_DATABASEW>
SC_GROUP_IDENTIFIER	EQU	<SC_GROUP_IDENTIFIERW>
else 
SERVICES_ACTIVE_DATABASE	EQU	<SERVICES_ACTIVE_DATABASEA>
SERVICES_FAILED_DATABASE	EQU	<SERVICES_FAILED_DATABASEA>
SC_GROUP_IDENTIFIER	EQU	<SC_GROUP_IDENTIFIERA>
endif 
SERVICE_NO_CHANGE	EQU	0ffffffffh
SERVICE_ACTIVE	EQU	00000001h
SERVICE_INACTIVE	EQU	00000002h
SERVICE_STATE_ALL	EQU	( SERVICE_ACTIVE  or  SERVICE_INACTIVE )
SERVICE_CONTROL_STOP	EQU	00000001h
SERVICE_CONTROL_PAUSE	EQU	00000002h
SERVICE_CONTROL_CONTINUE	EQU	00000003h
SERVICE_CONTROL_INTERROGATE	EQU	00000004h
SERVICE_CONTROL_SHUTDOWN	EQU	00000005h
SERVICE_CONTROL_PARAMCHANGE	EQU	00000006h
SERVICE_CONTROL_NETBINDADD	EQU	00000007h
SERVICE_CONTROL_NETBINDREMOVE	EQU	00000008h
SERVICE_CONTROL_NETBINDENABLE	EQU	00000009h
SERVICE_CONTROL_NETBINDDISABLE	EQU	0000000Ah
SERVICE_CONTROL_DEVICEEVENT	EQU	0000000Bh
SERVICE_CONTROL_HARDWAREPROFILECHANGE	EQU	0000000Ch
SERVICE_CONTROL_POWEREVENT	EQU	0000000Dh
SERVICE_CONTROL_SESSIONCHANGE	EQU	0000000Eh
SERVICE_STOPPED	EQU	00000001h
SERVICE_START_PENDING	EQU	00000002h
SERVICE_STOP_PENDING	EQU	00000003h
SERVICE_RUNNING	EQU	00000004h
SERVICE_CONTINUE_PENDING	EQU	00000005h
SERVICE_PAUSE_PENDING	EQU	00000006h
SERVICE_PAUSED	EQU	00000007h
SERVICE_ACCEPT_STOP	EQU	00000001h
SERVICE_ACCEPT_PAUSE_CONTINUE	EQU	00000002h
SERVICE_ACCEPT_SHUTDOWN	EQU	00000004h
SERVICE_ACCEPT_PARAMCHANGE	EQU	00000008h
SERVICE_ACCEPT_NETBINDCHANGE	EQU	00000010h
SERVICE_ACCEPT_HARDWAREPROFILECHANGE	EQU	00000020h
SERVICE_ACCEPT_POWEREVENT	EQU	00000040h
SERVICE_ACCEPT_SESSIONCHANGE	EQU	00000080h
SC_MANAGER_CONNECT	EQU	0001h
SC_MANAGER_CREATE_SERVICE	EQU	0002h
SC_MANAGER_ENUMERATE_SERVICE	EQU	0004h
SC_MANAGER_LOCK	EQU	0008h
SC_MANAGER_QUERY_LOCK_STATUS	EQU	0010h
SC_MANAGER_MODIFY_BOOT_CONFIG	EQU	0020h
SC_MANAGER_ALL_ACCESS	EQU	( STANDARD_RIGHTS_REQUIRED  or  SC_MANAGER_CONNECT  or  SC_MANAGER_CREATE_SERVICE  or  SC_MANAGER_ENUMERATE_SERVICE  or  SC_MANAGER_LOCK  or  SC_MANAGER_QUERY_LOCK_STATUS  or  SC_MANAGER_MODIFY_BOOT_CONFIG )
SERVICE_QUERY_CONFIG	EQU	0001h
SERVICE_CHANGE_CONFIG	EQU	0002h
SERVICE_QUERY_STATUS	EQU	0004h
SERVICE_ENUMERATE_DEPENDENTS	EQU	0008h
SERVICE_START	EQU	0010h
SERVICE_STOP	EQU	0020h
SERVICE_PAUSE_CONTINUE	EQU	0040h
SERVICE_INTERROGATE	EQU	0080h
SERVICE_USER_DEFINED_CONTROL	EQU	0100h
SERVICE_ALL_ACCESS	EQU	( STANDARD_RIGHTS_REQUIRED or \
	SERVICE_QUERY_CONFIG or \
	SERVICE_CHANGE_CONFIG or \
	SERVICE_QUERY_STATUS or \
	SERVICE_ENUMERATE_DEPENDENTS or \
	SERVICE_START or \
	SERVICE_STOP or \
	SERVICE_PAUSE_CONTINUE or \
	SERVICE_INTERROGATE or \
	SERVICE_USER_DEFINED_CONTROL )
SERVICE_RUNS_IN_SYSTEM_PROCESS	EQU	00000001h
SERVICE_CONFIG_DESCRIPTION	EQU	1
SERVICE_CONFIG_FAILURE_ACTIONS	EQU	2
SERVICE_DESCRIPTIONA	struct 
lpDescription	LPSTR	?
SERVICE_DESCRIPTIONA	ends

LPSERVICE_DESCRIPTIONA typedef ptr SERVICE_DESCRIPTIONA

SERVICE_DESCRIPTIONW	struct 
lpDescription	LPWSTR	?
SERVICE_DESCRIPTIONW	ends

LPSERVICE_DESCRIPTIONW typedef ptr SERVICE_DESCRIPTIONW

ifdef UNICODE
SERVICE_DESCRIPTION typedef SERVICE_DESCRIPTIONW
LPSERVICE_DESCRIPTION typedef LPSERVICE_DESCRIPTIONW
else 
SERVICE_DESCRIPTION typedef SERVICE_DESCRIPTIONA
LPSERVICE_DESCRIPTION typedef LPSERVICE_DESCRIPTIONA
endif 
SC_ACTION_TYPE typedef DWORD
SC_ACTION_NONE = 0 
SC_ACTION_RESTART = 1 
SC_ACTION_REBOOT = 2 
SC_ACTION_RUN_COMMAND = 3 

SC_ACTION	struct 
Type_	SC_ACTION_TYPE	?
Delay	DWORD	?
SC_ACTION	ends

LPSC_ACTION typedef ptr SC_ACTION

SERVICE_FAILURE_ACTIONSA	struct 
dwResetPeriod	DWORD	?
lpRebootMsg	LPSTR	?
lpCommand	LPSTR	?
cActions	DWORD	?
lpsaActions	LPSC_ACTION ?
SERVICE_FAILURE_ACTIONSA	ends

LPSERVICE_FAILURE_ACTIONSA typedef ptr SERVICE_FAILURE_ACTIONSA

SERVICE_FAILURE_ACTIONSW	struct 
dwResetPeriod	DWORD	?
lpRebootMsg	LPWSTR	?
lpCommand	LPWSTR	?
cActions	DWORD	?
lpsaActions	LPSC_ACTION ?
SERVICE_FAILURE_ACTIONSW	ends

LPSERVICE_FAILURE_ACTIONSW typedef ptr SERVICE_FAILURE_ACTIONSW

ifdef UNICODE
SERVICE_FAILURE_ACTIONS typedef SERVICE_FAILURE_ACTIONSW
LPSERVICE_FAILURE_ACTIONS typedef LPSERVICE_FAILURE_ACTIONSW
else 
SERVICE_FAILURE_ACTIONS typedef SERVICE_FAILURE_ACTIONSA
LPSERVICE_FAILURE_ACTIONS typedef LPSERVICE_FAILURE_ACTIONSA
endif 
DECLARE_HANDLE( SC_HANDLE)
LPSC_HANDLE typedef ptr SC_HANDLE
DECLARE_HANDLE( SERVICE_STATUS_HANDLE)
SC_STATUS_TYPE typedef DWORD
SC_STATUS_PROCESS_INFO = 0 

SC_ENUM_TYPE typedef DWORD
SC_ENUM_PROCESS_INFO = 0 

SERVICE_STATUS	struct 
dwServiceType	DWORD	?
dwCurrentState	DWORD	?
dwControlsAccepted	DWORD	?
dwWin32ExitCode	DWORD	?
dwServiceSpecificExitCode	DWORD	?
dwCheckPoint	DWORD	?
dwWaitHint	DWORD	?
SERVICE_STATUS	ends

LPSERVICE_STATUS typedef ptr SERVICE_STATUS

SERVICE_STATUS_PROCESS	struct 
dwServiceType	DWORD	?
dwCurrentState	DWORD	?
dwControlsAccepted	DWORD	?
dwWin32ExitCode	DWORD	?
dwServiceSpecificExitCode	DWORD	?
dwCheckPoint	DWORD	?
dwWaitHint	DWORD	?
dwProcessId	DWORD	?
dwServiceFlags	DWORD	?
SERVICE_STATUS_PROCESS	ends

LPSERVICE_STATUS_PROCESS typedef ptr SERVICE_STATUS_PROCESS

ENUM_SERVICE_STATUSA	struct 
lpServiceName	LPSTR	?
lpDisplayName	LPSTR	?
ServiceStatus	SERVICE_STATUS	<>
ENUM_SERVICE_STATUSA	ends

LPENUM_SERVICE_STATUSA typedef ptr ENUM_SERVICE_STATUSA

ENUM_SERVICE_STATUSW	struct 
lpServiceName	LPWSTR	?
lpDisplayName	LPWSTR	?
ServiceStatus	SERVICE_STATUS	<>
ENUM_SERVICE_STATUSW	ends

LPENUM_SERVICE_STATUSW typedef ptr ENUM_SERVICE_STATUSW

ifdef UNICODE
ENUM_SERVICE_STATUS typedef ENUM_SERVICE_STATUSW
LPENUM_SERVICE_STATUS typedef LPENUM_SERVICE_STATUSW
else 
ENUM_SERVICE_STATUS typedef ENUM_SERVICE_STATUSA
LPENUM_SERVICE_STATUS typedef LPENUM_SERVICE_STATUSA
endif 
ENUM_SERVICE_STATUS_PROCESSA	struct 
lpServiceName	LPSTR	?
lpDisplayName	LPSTR	?
ServiceStatusProcess	SERVICE_STATUS_PROCESS	<>
ENUM_SERVICE_STATUS_PROCESSA	ends

LPENUM_SERVICE_STATUS_PROCESSA typedef ptr ENUM_SERVICE_STATUS_PROCESSA

ENUM_SERVICE_STATUS_PROCESSW	struct 
lpServiceName	LPWSTR	?
lpDisplayName	LPWSTR	?
ServiceStatusProcess	SERVICE_STATUS_PROCESS	<>
ENUM_SERVICE_STATUS_PROCESSW	ends

LPENUM_SERVICE_STATUS_PROCESSW typedef ptr ENUM_SERVICE_STATUS_PROCESSW

ifdef UNICODE
ENUM_SERVICE_STATUS_PROCESS typedef ENUM_SERVICE_STATUS_PROCESSW
LPENUM_SERVICE_STATUS_PROCESS typedef LPENUM_SERVICE_STATUS_PROCESSW
else 
ENUM_SERVICE_STATUS_PROCESS typedef ENUM_SERVICE_STATUS_PROCESSA
LPENUM_SERVICE_STATUS_PROCESS typedef LPENUM_SERVICE_STATUS_PROCESSA
endif 
SC_LOCK typedef LPVOID
QUERY_SERVICE_LOCK_STATUSA	struct 
fIsLocked	DWORD	?
lpLockOwner	LPSTR	?
dwLockDuration	DWORD	?
QUERY_SERVICE_LOCK_STATUSA	ends

LPQUERY_SERVICE_LOCK_STATUSA typedef ptr QUERY_SERVICE_LOCK_STATUSA

QUERY_SERVICE_LOCK_STATUSW	struct 
fIsLocked	DWORD	?
lpLockOwner	LPWSTR	?
dwLockDuration	DWORD	?
QUERY_SERVICE_LOCK_STATUSW	ends

LPQUERY_SERVICE_LOCK_STATUSW typedef ptr QUERY_SERVICE_LOCK_STATUSW

ifdef UNICODE
QUERY_SERVICE_LOCK_STATUS typedef QUERY_SERVICE_LOCK_STATUSW
LPQUERY_SERVICE_LOCK_STATUS typedef LPQUERY_SERVICE_LOCK_STATUSW
else 
QUERY_SERVICE_LOCK_STATUS typedef QUERY_SERVICE_LOCK_STATUSA
LPQUERY_SERVICE_LOCK_STATUS typedef LPQUERY_SERVICE_LOCK_STATUSA
endif 
QUERY_SERVICE_CONFIGA	struct 
dwServiceType	DWORD	?
dwStartType	DWORD	?
dwErrorControl	DWORD	?
lpBinaryPathName	LPSTR	?
lpLoadOrderGroup	LPSTR	?
dwTagId	DWORD	?
lpDependencies	LPSTR	?
lpServiceStartName	LPSTR	?
lpDisplayName	LPSTR	?
QUERY_SERVICE_CONFIGA	ends

LPQUERY_SERVICE_CONFIGA typedef ptr QUERY_SERVICE_CONFIGA

QUERY_SERVICE_CONFIGW	struct 
dwServiceType	DWORD	?
dwStartType	DWORD	?
dwErrorControl	DWORD	?
lpBinaryPathName	LPWSTR	?
lpLoadOrderGroup	LPWSTR	?
dwTagId	DWORD	?
lpDependencies	LPWSTR	?
lpServiceStartName	LPWSTR	?
lpDisplayName	LPWSTR	?
QUERY_SERVICE_CONFIGW	ends

LPQUERY_SERVICE_CONFIGW typedef ptr QUERY_SERVICE_CONFIGW

ifdef UNICODE
QUERY_SERVICE_CONFIG typedef QUERY_SERVICE_CONFIGW
LPQUERY_SERVICE_CONFIG typedef LPQUERY_SERVICE_CONFIGW
else 
QUERY_SERVICE_CONFIG typedef QUERY_SERVICE_CONFIGA
LPQUERY_SERVICE_CONFIG typedef LPQUERY_SERVICE_CONFIGA
endif 
proto_LPSERVICE_MAIN_FUNCTIONW typedef proto WINSTDCALLCONV :DWORD,:ptr LPWSTR
LPSERVICE_MAIN_FUNCTIONW typedef ptr proto_LPSERVICE_MAIN_FUNCTIONW
proto_LPSERVICE_MAIN_FUNCTIONA typedef proto WINSTDCALLCONV :DWORD,:ptr LPSTR
LPSERVICE_MAIN_FUNCTIONA typedef ptr proto_LPSERVICE_MAIN_FUNCTIONA
ifdef UNICODE
LPSERVICE_MAIN_FUNCTION	EQU	<LPSERVICE_MAIN_FUNCTIONW>
else 
LPSERVICE_MAIN_FUNCTION	EQU	<LPSERVICE_MAIN_FUNCTIONA>
endif 
SERVICE_TABLE_ENTRYA	struct 
lpServiceName	LPSTR	?
lpServiceProc	LPSERVICE_MAIN_FUNCTIONA	?
SERVICE_TABLE_ENTRYA	ends

LPSERVICE_TABLE_ENTRYA typedef ptr SERVICE_TABLE_ENTRYA

SERVICE_TABLE_ENTRYW	struct 
lpServiceName	LPWSTR	?
lpServiceProc	LPSERVICE_MAIN_FUNCTIONW	?
SERVICE_TABLE_ENTRYW	ends

LPSERVICE_TABLE_ENTRYW typedef ptr SERVICE_TABLE_ENTRYW

ifdef UNICODE
SERVICE_TABLE_ENTRY typedef SERVICE_TABLE_ENTRYW
LPSERVICE_TABLE_ENTRY typedef LPSERVICE_TABLE_ENTRYW
else 
SERVICE_TABLE_ENTRY typedef SERVICE_TABLE_ENTRYA
LPSERVICE_TABLE_ENTRY typedef LPSERVICE_TABLE_ENTRYA
endif 
proto_LPHANDLER_FUNCTION typedef proto WINSTDCALLCONV :DWORD
LPHANDLER_FUNCTION typedef ptr proto_LPHANDLER_FUNCTION
proto_LPHANDLER_FUNCTION_EX typedef proto WINSTDCALLCONV :DWORD,:DWORD,:LPVOID,:LPVOID
LPHANDLER_FUNCTION_EX typedef ptr proto_LPHANDLER_FUNCTION_EX
@DefProto WINADVAPI, ChangeServiceConfigA, stdcall, , <:SC_HANDLE, :DWORD, :DWORD, :DWORD, :LPSTR, :LPSTR, :LPDWORD, :LPSTR, :LPSTR, :LPSTR, :LPSTR>, 44
@DefProto WINADVAPI, ChangeServiceConfigW, stdcall, , <:SC_HANDLE, :DWORD, :DWORD, :DWORD, :LPWSTR, :LPWSTR, :LPDWORD, :LPWSTR, :LPWSTR, :LPWSTR, :LPWSTR>, 44
ifdef UNICODE
ChangeServiceConfig	EQU	<ChangeServiceConfigW>
else 
ChangeServiceConfig	EQU	<ChangeServiceConfigA>
endif 
@DefProto WINADVAPI, ChangeServiceConfig2A, stdcall, , <:SC_HANDLE, :DWORD, :LPVOID>, 12
@DefProto WINADVAPI, ChangeServiceConfig2W, stdcall, , <:SC_HANDLE, :DWORD, :LPVOID>, 12
ifdef UNICODE
ChangeServiceConfig2	EQU	<ChangeServiceConfig2W>
else 
ChangeServiceConfig2	EQU	<ChangeServiceConfig2A>
endif 
@DefProto WINADVAPI, CloseServiceHandle, stdcall, , <:SC_HANDLE>, 4
@DefProto WINADVAPI, ControlService, stdcall, , <:SC_HANDLE, :DWORD, :LPSERVICE_STATUS>, 12
@DefProto WINADVAPI, CreateServiceA, stdcall, , <:SC_HANDLE, :LPSTR, :LPSTR, :DWORD, :DWORD, :DWORD, :DWORD, :LPSTR, :LPSTR, :LPDWORD, :LPSTR, :LPSTR, :LPSTR>, 52
@DefProto WINADVAPI, CreateServiceW, stdcall, , <:SC_HANDLE, :LPWSTR, :LPWSTR, :DWORD, :DWORD, :DWORD, :DWORD, :LPWSTR, :LPWSTR, :LPDWORD, :LPWSTR, :LPWSTR, :LPWSTR>, 52
ifdef UNICODE
CreateService	EQU	<CreateServiceW>
else 
CreateService	EQU	<CreateServiceA>
endif 
@DefProto WINADVAPI, DeleteService, stdcall, , <:SC_HANDLE>, 4
@DefProto WINADVAPI, EnumDependentServicesA, stdcall, , <:SC_HANDLE, :DWORD, :LPENUM_SERVICE_STATUSA, :DWORD, :LPDWORD, :LPDWORD>, 24
@DefProto WINADVAPI, EnumDependentServicesW, stdcall, , <:SC_HANDLE, :DWORD, :LPENUM_SERVICE_STATUSW, :DWORD, :LPDWORD, :LPDWORD>, 24
ifdef UNICODE
EnumDependentServices	EQU	<EnumDependentServicesW>
else 
EnumDependentServices	EQU	<EnumDependentServicesA>
endif 
@DefProto WINADVAPI, EnumServicesStatusA, stdcall, , <:SC_HANDLE, :DWORD, :DWORD, :LPENUM_SERVICE_STATUSA, :DWORD, :LPDWORD, :LPDWORD, :LPDWORD>, 32
@DefProto WINADVAPI, EnumServicesStatusW, stdcall, , <:SC_HANDLE, :DWORD, :DWORD, :LPENUM_SERVICE_STATUSW, :DWORD, :LPDWORD, :LPDWORD, :LPDWORD>, 32
ifdef UNICODE
EnumServicesStatus	EQU	<EnumServicesStatusW>
else 
EnumServicesStatus	EQU	<EnumServicesStatusA>
endif 
@DefProto WINADVAPI, EnumServicesStatusExA, stdcall, , <:SC_HANDLE, :SC_ENUM_TYPE, :DWORD, :DWORD, :LPBYTE, :DWORD, :LPDWORD, :LPDWORD, :LPDWORD, :LPSTR>, 40
@DefProto WINADVAPI, EnumServicesStatusExW, stdcall, , <:SC_HANDLE, :SC_ENUM_TYPE, :DWORD, :DWORD, :LPBYTE, :DWORD, :LPDWORD, :LPDWORD, :LPDWORD, :LPWSTR>, 40
ifdef UNICODE
EnumServicesStatusEx	EQU	<EnumServicesStatusExW>
else 
EnumServicesStatusEx	EQU	<EnumServicesStatusExA>
endif 
@DefProto WINADVAPI, GetServiceKeyNameA, stdcall, , <:SC_HANDLE, :LPSTR, :LPSTR, :LPDWORD>, 16
@DefProto WINADVAPI, GetServiceKeyNameW, stdcall, , <:SC_HANDLE, :LPWSTR, :LPWSTR, :LPDWORD>, 16
ifdef UNICODE
GetServiceKeyName	EQU	<GetServiceKeyNameW>
else 
GetServiceKeyName	EQU	<GetServiceKeyNameA>
endif 
@DefProto WINADVAPI, GetServiceDisplayNameA, stdcall, , <:SC_HANDLE, :LPSTR, :LPSTR, :LPDWORD>, 16
@DefProto WINADVAPI, GetServiceDisplayNameW, stdcall, , <:SC_HANDLE, :LPWSTR, :LPWSTR, :LPDWORD>, 16
ifdef UNICODE
GetServiceDisplayName	EQU	<GetServiceDisplayNameW>
else 
GetServiceDisplayName	EQU	<GetServiceDisplayNameA>
endif 
@DefProto WINADVAPI, LockServiceDatabase, stdcall, , <:SC_HANDLE>, 4
@DefProto WINADVAPI, NotifyBootConfigStatus, stdcall, , <:BOOL>, 4
@DefProto WINADVAPI, OpenSCManagerA, stdcall, , <:LPSTR, :LPSTR, :DWORD>, 12
@DefProto WINADVAPI, OpenSCManagerW, stdcall, , <:LPWSTR, :LPWSTR, :DWORD>, 12
ifdef UNICODE
OpenSCManager	EQU	<OpenSCManagerW>
else 
OpenSCManager	EQU	<OpenSCManagerA>
endif 
@DefProto WINADVAPI, OpenServiceA, stdcall, , <:SC_HANDLE, :LPSTR, :DWORD>, 12
@DefProto WINADVAPI, OpenServiceW, stdcall, , <:SC_HANDLE, :LPWSTR, :DWORD>, 12
ifdef UNICODE
OpenService	EQU	<OpenServiceW>
else 
OpenService	EQU	<OpenServiceA>
endif 
@DefProto WINADVAPI, QueryServiceConfigA, stdcall, , <:SC_HANDLE, :LPQUERY_SERVICE_CONFIGA, :DWORD, :LPDWORD>, 16
@DefProto WINADVAPI, QueryServiceConfigW, stdcall, , <:SC_HANDLE, :LPQUERY_SERVICE_CONFIGW, :DWORD, :LPDWORD>, 16
ifdef UNICODE
QueryServiceConfig	EQU	<QueryServiceConfigW>
else 
QueryServiceConfig	EQU	<QueryServiceConfigA>
endif 
@DefProto WINADVAPI, QueryServiceConfig2A, stdcall, , <:SC_HANDLE, :DWORD, :LPBYTE, :DWORD, :LPDWORD>, 20
@DefProto WINADVAPI, QueryServiceConfig2W, stdcall, , <:SC_HANDLE, :DWORD, :LPBYTE, :DWORD, :LPDWORD>, 20
ifdef UNICODE
QueryServiceConfig2	EQU	<QueryServiceConfig2W>
else 
QueryServiceConfig2	EQU	<QueryServiceConfig2A>
endif 
@DefProto WINADVAPI, QueryServiceLockStatusA, stdcall, , <:SC_HANDLE, :LPQUERY_SERVICE_LOCK_STATUSA, :DWORD, :LPDWORD>, 16
@DefProto WINADVAPI, QueryServiceLockStatusW, stdcall, , <:SC_HANDLE, :LPQUERY_SERVICE_LOCK_STATUSW, :DWORD, :LPDWORD>, 16
ifdef UNICODE
QueryServiceLockStatus	EQU	<QueryServiceLockStatusW>
else 
QueryServiceLockStatus	EQU	<QueryServiceLockStatusA>
endif 
@DefProto WINADVAPI, QueryServiceObjectSecurity, stdcall, , <:SC_HANDLE, :SECURITY_INFORMATION, :PSECURITY_DESCRIPTOR, :DWORD, :LPDWORD>, 20
@DefProto WINADVAPI, QueryServiceStatus, stdcall, , <:SC_HANDLE, :LPSERVICE_STATUS>, 8
@DefProto WINADVAPI, QueryServiceStatusEx, stdcall, , <:SC_HANDLE, :SC_STATUS_TYPE, :LPBYTE, :DWORD, :LPDWORD>, 20
@DefProto WINADVAPI, RegisterServiceCtrlHandlerA, stdcall, , <:LPSTR, :LPHANDLER_FUNCTION>, 8
@DefProto WINADVAPI, RegisterServiceCtrlHandlerW, stdcall, , <:LPWSTR, :LPHANDLER_FUNCTION>, 8
ifdef UNICODE
RegisterServiceCtrlHandler	EQU	<RegisterServiceCtrlHandlerW>
else 
RegisterServiceCtrlHandler	EQU	<RegisterServiceCtrlHandlerA>
endif 
@DefProto WINADVAPI, RegisterServiceCtrlHandlerExA, stdcall, , <:LPSTR, :LPHANDLER_FUNCTION_EX, :LPVOID>, 12
@DefProto WINADVAPI, RegisterServiceCtrlHandlerExW, stdcall, , <:LPWSTR, :LPHANDLER_FUNCTION_EX, :LPVOID>, 12
ifdef UNICODE
RegisterServiceCtrlHandlerEx	EQU	<RegisterServiceCtrlHandlerExW>
else 
RegisterServiceCtrlHandlerEx	EQU	<RegisterServiceCtrlHandlerExA>
endif 
@DefProto WINADVAPI, SetServiceObjectSecurity, stdcall, , <:SC_HANDLE, :SECURITY_INFORMATION, :PSECURITY_DESCRIPTOR>, 12
@DefProto WINADVAPI, SetServiceStatus, stdcall, , <:SERVICE_STATUS_HANDLE, :LPSERVICE_STATUS>, 8
@DefProto WINADVAPI, StartServiceCtrlDispatcherA, stdcall, , <:ptr SERVICE_TABLE_ENTRYA>, 4
@DefProto WINADVAPI, StartServiceCtrlDispatcherW, stdcall, , <:ptr SERVICE_TABLE_ENTRYW>, 4
ifdef UNICODE
StartServiceCtrlDispatcher	EQU	<StartServiceCtrlDispatcherW>
else 
StartServiceCtrlDispatcher	EQU	<StartServiceCtrlDispatcherA>
endif 
@DefProto WINADVAPI, StartServiceA, stdcall, , <:SC_HANDLE, :DWORD, :ptr LPSTR>, 12
@DefProto WINADVAPI, StartServiceW, stdcall, , <:SC_HANDLE, :DWORD, :ptr LPWSTR>, 12
ifdef UNICODE
StartService	EQU	<StartServiceW>
else 
StartService	EQU	<StartServiceA>
endif 
@DefProto WINADVAPI, UnlockServiceDatabase, stdcall, , <:SC_LOCK>, 4
ifdef __cplusplus
;}
endif 
endif 

;--- errors: 0
;--- end of file ---
